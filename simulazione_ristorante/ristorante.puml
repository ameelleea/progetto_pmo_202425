@startuml ristorante

interface Menu {
    + getProdotti(): List<Prodotto> 
    + getProdottiPerTipo(tipo: TipoProdotto): List<Prodotto>
    + getProdottiPerReparto(TipoReparto r): List<Prodotto> 
    + getProdottoCasuale(reparto: TipoReparto, tipo: TipoProdotto): Prodotto 
    + aggiungiProdotto(p: Prodotto)
    + rimuoviProdotto(p: Prodotto)

}

interface Ordine {
    + getTavoloRiferimento(): Tavolo
    + getProdotti(): Map<Prodotto, Integer> 
    + getTavoloRiferimento(): Tavolo
    + setStatoProdotto(prodotto: Prodotto, stato: StatoProdotto)
    + isCompletato(): boolean
    + notificaProdottoPronto(prodotto: Prodotto): void 
}

interface Prodotto {
   + getNome(): String
   + getTempoPreparazione(): int
   + getReparto(): TipoReparto
   + getTipo(): TipoProdotto
   + getPrezzo(): double
   + setPrezzo(prezzo: double)
}

interface Rango {
    + getTavoli(): List<Tavolo> 
    + getCameriere(): Dipendente 
    + getTavoliLiberi(): List<Tavolo> 
    + aggiungiTavolo(tavolo: Tavolo)
    + getId(): String
    + setCameriere(c: Dipendente)
}

interface Sala {
    + getRangoByTavolo(tavolo: Tavolo): Rango 
    + getRangoByCameriere(c: Dipendente): Rango
    + getRango(r: Rango): Rango
    + getRanghi(): List<Rango> 
}


interface Tavolo {
    + getNumero(): int
    + getNumeroPosti(): int
    + isOccupato(): boolean
    + occupa(gruppo: GruppoClienti)
    + libera()
    + getGruppoCorrente(): GruppoClienti 
    + getStatoTavolo(): StatoTavolo
    + setStatoTavolo(s: StatoTavolo)
}

interface Cassa {
    + calcolaConto(t: Tavolo): double
    + calcolaTotaliDiFineTurno()
    + apriTavolo(t: Tavolo)
    + chiudiTavolo(t: Tavolo)
    + getTavoliLiberi(): List<Tavolo> 
    + totaleGiornata(): double
    + smistaOrdine(o: Ordine)
    + notificaProdottoPronto(rodotto: Prodotto, ordine: Ordine) 
    + notificaOrdineCompletato(ordine: Ordine)
    + registraIncasso(importo: double, tavolo: Tavolo) 
}

interface Cliente {
    + ordina(m: Menu, giro: int): List<Prodotto> 
}

interface Dipendente {
    + getIdDipendente(): int
    + getPaga(): double
    + lavora(): void
}

interface GruppoClienti {
    + cena()
    + getID(): String
    + richiediTavolo(r: Ristorante)
    + getOrdineGruppo(): Ordine
    + getOrdineGruppo(giro: String): Ordine 
    + richiedeConto(): boolean
    + getNumeroClienti(): int
    + getClienti(): List<Cliente> 
    + getTavolo(): Tavolo 
    + haOrdinato(giro: int): boolean 
    + setTavoloAssegnato(tavolo: Tavolo)
}

interface Reparto {
    + isAperto(): boolean
    + apriReparto()
    + chiudiReparto()
    + getDipendenti(): List<Dipendente> 
    + aggiungiDipendente(d: Dipendente)
    + aggiungiOrdinazione(o: Ordine)
    + rimuoviDipendente(d: Dipendente)
    + getTipoReparto(): TipoReparto 
    + gestisciOrdine(o: Ordine)
    + notificaProdottoPronto(p: Prodotto, numT: int)
    + avviaLavoratori()
}

interface Ristorante {
    + apriLocale(): void
    + chiudiLocale(): void
    + isAperto(): boolean
    + getNome(): String
    + getReparto(TipoReparto tipo): Reparto
    + accogliClienti(GruppoClienti gruppo): void
    + getMenu(): Menu
    + getCassa(): Cassa
    + getSala(): Sala
    + getProssimoGruppo(): GruppoClienti
}

enum StatoProdotto {
  IN_ATTESA
  IN_PREPARAZIONE
  PRONTO
}

enum TipoProdotto {
  PORTATA
  BEVANDA
  CAFFETTERIA
  DOLCE
}

enum StatoTavolo {
  NON_ORDINATO
  ORDINE_PRONTO
  SERVITO
  RICHIESTA_CONTO
}

enum TipoReparto {
  CUCINA
  PIZZERIA
  BAR
}

@enduml
